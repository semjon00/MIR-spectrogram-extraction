#version 430
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

//_GEN_BUFFERS

#define M_PI 3.1415926535897932384626433832795
#define M_TAU 6.2831853071795864769252867665590

// Saves sample activation value to Act
void to_output(int mtc_i, int sample_i, float value) {
    int y_index = len0(Act) - 1 - mtc_i; // We want lower frequencies to be at the bottom of the image

    if (IS_LOSSLESS) {
        Act[y_index][sample_i] = value;
    } else {
        float sample_i_f = float(sample_i);
        float el_f = (len1(Act) * sample_i_f) / len(Samples);
        highp int el_w = int(el_f);
        float el_d = el_f - float(el_w);
        Act[y_index][el_w] += (1 - el_d) * value;
        Act[y_index][el_w + 1] += el_d * value;
    }
}

void raw_update_matcher(int mtc_i, int index, float value, float poff) {
    float old_value = MtcBuf[mtc_i][index];
    float new_value = (1.0 - poff) * MtcBuf[mtc_i][index] + poff * value;
    MtcBuf[mtc_i][index] = new_value;

    float percent_at_index = float(index) / float(MtcLength[mtc_i]);
    float32 comval = float32(M_PI * MtcSampleSpan[mtc_i] * percent_at_index);

    // cor = cor - sin(...) * old + sin(...) * new = cor + sin(...) * (new - old)
    MtcSincor[mtc_i] += sin(comval) * (new_value - old_value);
    MtcCoscor[mtc_i] += cos(comval) * (new_value - old_value);
}

void update_matcher(int mtc_i, int sample_i, float value) {
    float fuzzy_pos = float(sample_i) / MtcSampleSpan[mtc_i];
    fuzzy_pos -= floor(fuzzy_pos);
    fuzzy_pos *= float(MtcLength[mtc_i]);

    highp int indexl = int(fuzzy_pos);
    int indexr = (indexl + 1) % MtcLength[mtc_i];
    float poffr = fuzzy_pos - float(indexl);

    raw_update_matcher(mtc_i, indexl, Samples[sample_i], 1.0 - poffr);
    raw_update_matcher(mtc_i, indexr, Samples[sample_i], poffr);
}

void main() {
    int mtc_i = int(gl_GlobalInvocationID.x);
    if (mtc_i >= len0(MtcFreq)) {
        return;
    }

    for (int op_i = ProcessingStart; op_i < ProcessingEnd; ++op_i) {
        update_matcher(mtc_i, op_i, Samples[op_i]);

        float act = sqrt(MtcSincor[mtc_i] * MtcSincor[mtc_i] + MtcCoscor[mtc_i] * MtcCoscor[mtc_i]);
        act /= float(MtcLength[mtc_i]);
        to_output(mtc_i, op_i, act);
    }
}
